# Generated by Django 2.2.6 on 2019-11-13 14:40

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(upload_to='images/')),
                ('first_name', models.CharField(blank=True, max_length=250)),
                ('last_name', models.CharField(blank=True, max_length=250)),
                ('age', models.SmallIntegerField(default=0)),
                ('gender', models.CharField(choices=[('G', 'Girl'), ('B', 'Boy')], default='B', max_length=1)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('graduation_date', models.CharField(blank=True, max_length=4)),
                ('bats', models.CharField(choices=[('R', 'Right'), ('L', 'Left'), ('S', 'Switch')], default='R', max_length=1)),
                ('throws', models.CharField(choices=[('R', 'Right'), ('L', 'Left')], default='R', max_length=1)),
                ('weight', models.SmallIntegerField(blank=True)),
                ('school', models.CharField(max_length=200)),
                ('position', models.CharField(choices=[('P', 'Pitcher'), ('C', 'Catcher'), ('1B', 'First Base'), ('SS', 'Shortstop'), ('2B', 'Second Base'), ('3B', 'Third Base'), ('OF', 'OutField')], default='P', max_length=2)),
                ('bio', models.TextField(blank=True, max_length=500, null=True)),
                ('is_professional', models.BooleanField(default=False)),
                ('team_class', models.CharField(choices=[('Rookie Leauge', 'Rookie League'), ('Low A', 'Low A'), ('High A', 'Hige A'), ('AA', 'AA'), ('AAA', 'AAA'), ('Major League', 'Major League')], default='AA', max_length=200)),
                ('mlb_club', models.CharField(blank=True, max_length=200)),
                ('draft_round', models.SmallIntegerField(blank=True, null=True, verbose_name='round:')),
                ('draft_pick', models.SmallIntegerField(blank=True, null=True, verbose_name='pick:')),
                ('stat_link', models.URLField(blank=True, null=True, verbose_name='stats')),
                ('lessons', models.CharField(choices=[('PITCHING', 'Pitching Lessons'), ('HITTING', 'Hitting Lessons'), ('FIELDING', 'Fielding Lessons')], default='Hitting Lessons', max_length=200)),
                ('specialty', models.CharField(choices=[('Pitching', 'Pitching'), ('Hitting', 'Hitting'), ('Fielding', 'Fielding')], default='Hitting', max_length=200)),
                ('price', models.IntegerField(default=50)),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.User')),
            ],
        ),
    ]
